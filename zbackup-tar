#!/usr/bin/env python3
# The MIT License (MIT)
#
# Copyright (c) 2014 OneIT
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

from xml.etree import ElementTree
from xml.etree.ElementTree import Element, SubElement
from xml.dom import minidom
from collections import OrderedDict
import sys, argparse, os, time, pprint, datetime, hashlib, subprocess, io, tarfile, fnmatch, re, csv

dPath=""
nBackup=""
iPath=""
excludes=[]
mDict={}
mAge=0
mAJitter=0

def readCSVManifestFC(fName, aFlags):
    
    mDict={}

    data=readManifestFromBackup(fName, aFlags).decode('utf-8')

    if not data:
        raise Exception(-1)
    
    sIO=io.StringIO(data)
    csvReader=csv.reader(sIO, dialect='unix', quoting=csv.QUOTE_MINIMAL)    

    for row in csvReader:    
        mDict[row[0]]=[getETFromStr(row[2]), getETFromStr(row[3]), int(row[1]), row[4], 0, int(row[5]), int(row[6]), int(row[7])]                
        
    return mDict 

def readXMLManifestFC(fName, aFlags):
    
    mDict={}
    
    data=readManifestFromBackup(fName, aFlags)
                
    tree = ElementTree.fromstring(data)
    
    for node in tree.iter('fDesc'):
    
        key=node.find('name').text            
        mDict[key]=[getETFromStr(node.find('modOn').text), getETFromStr(node.find('backupOn').text), int(node.find('size').text), node.find('path').text, 0, int(node.find('uid').text), int(node.find('gid').text), int(node.find('isFile').text)]            
    
    return mDict 

def readCSVManifestFR(fName, includes, aFlags):

    mDict={}
    isFileMap={}
    iList=generatePatterns(includes)

    data=readManifestFromBackup(fName, aFlags).decode('utf-8')

    if not data:
        raise Exception(-1)
    
    sIO=io.StringIO(data)    
    csvReader=csv.reader(sIO, dialect='unix', quoting=csv.QUOTE_MINIMAL)    
 
    for row in csvReader: 
    
        name=row[0]

        if not matchPatterns(name, iList):
            continue

        key=row[4]

        if not mDict.__contains__(key):
            mDict[key]=set()

        mDict[key].add(name)

        isFileMap[name]=int(row[7])				
	    
    return mDict, isFileMap    

def readXMLManifestFR(fName, includes, aFlags):

    mDict={}
    isFileMap={}
    iList=generatePatterns(includes)

    data=readManifestFromBackup(fName, aFlags)
	            
    tree = ElementTree.fromstring(data)        

    for node in tree.iter('fDesc'):

        name=node.find('name').text

        if not matchPatterns(name, iList):
            continue

        key=node.find('path').text

        if not mDict.__contains__(key):
            mDict[key]=set()

        mDict[key].add(name)

        isFileMap[name]=int(node.find('isFile').text)				
	    
    return mDict, isFileMap

def getCSVManifestFromDict(mDict, rDir):     
        
    sDict=OrderedDict(sorted(mDict.items()))

    sIO=io.StringIO()
    csvWriter=csv.writer(sIO, dialect='unix', quoting=csv.QUOTE_MINIMAL)

    data=[]

    for k, v in sDict.items():
        
        if v[4]>0:                               
            
            data.append([k, v[2], datetime.datetime.fromtimestamp(v[0]).strftime('%Y-%m-%dT%H:%M:%S'), datetime.datetime.fromtimestamp(v[1]).strftime('%Y-%m-%dT%H:%M:%S'), v[3], v[5], v[6], v[7]])
            
            if v[7]:
                printInfo(v[4], k)                    

    csvWriter.writerows(data)

    return sIO.getvalue()    

def getXmlManifestFromDict(mDict, rDir):     
        
    sDict=OrderedDict(sorted(mDict.items()))

    top = Element('info')         

    for k, v in sDict.items():
        
        if v[4]>0:
                                
            child = SubElement(top, 'fDesc')
            
            nChild = SubElement(child, 'name')
            nChild.text = k
            
            sChild = SubElement(child, 'size')
            sChild.text = str(v[2])
            
            moChild = SubElement(child, 'modOn')
            moChild.text = datetime.datetime.fromtimestamp(v[0]).strftime('%Y-%m-%dT%H:%M:%S')
            
            boChild = SubElement(child, 'backupOn')
            boChild.text = datetime.datetime.fromtimestamp(v[1]).strftime('%Y-%m-%dT%H:%M:%S') 
            
            fPChild = SubElement(child, 'path')
            fPChild.text = v[3]

            sChild = SubElement(child, 'uid')
            sChild.text = str(v[5])

            sChild = SubElement(child, 'gid')
            sChild.text = str(v[6])  

            sChild = SubElement(child, 'isFile')
            sChild.text = str(v[7])                                   
            
            if v[7]:
                printInfo(v[4], k)                    
          
    return prettify(top)

def prettify(elem):
    
    rString = ElementTree.tostring(elem, 'UTF-8')
    rParsed = minidom.parseString(rString)
    
    return str(rParsed.toprettyxml(indent="  "))            

def shouldExtract(fName, v, bFPath, isFileMap):
    
    if fName in v:

        if(isFileMap[fName]):
            print(fName+"\tEXTRACTED from "+bFPath)

        return True

    return False

def extractFilesFromBackup(fName, aFlags, k, v, isFileMap):

    if(aFlags):
        shellCmd = "zbackup restore "+fName+' '+' '.join(aFlags)+' | cat'
    else:
        shellCmd = "zbackup restore "+fName+' | cat'         

    proc = subprocess.Popen(shellCmd, shell=True, stdout=subprocess.PIPE, stderr=subprocess.DEVNULL)

    with tarfile.open(mode="r|", fileobj=proc.stdout) as tar:  

        while True:
            nextTInfo = tar.next();

            if not nextTInfo:
                break

            if(shouldExtract(nextTInfo.name, v, k, isFileMap)):
                tar.extract(nextTInfo)

            tar.members=[]
                                                           
        tar.close() 

    proc.communicate()            
    proc.wait()     


def readManifestFromBackup(fName, aFlags):
    
    retString=bytes()

    if(aFlags):
        shellCmd = "zbackup restore "+fName+' '+' '.join(aFlags)+' | cat'
    else:
        shellCmd = "zbackup restore "+fName+' | cat'	    	

    proc = subprocess.Popen(shellCmd, shell=True, stdout=subprocess.PIPE, stderr=subprocess.DEVNULL)

    retString+=proc.stdout.read()    

    proc.wait()    
    
    return retString  

def createZBackup(fName, aFlags):

    if(aFlags):
        cCmd = "zbackup backup "+fName+" "+' '.join(aFlags)
        proc = subprocess.Popen(cCmd, shell=True, stdin=subprocess.PIPE, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
    else:
        proc = subprocess.Popen(["zbackup", "backup", fName], stdin=subprocess.PIPE, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)          

    with tarfile.open(mode="w|", fileobj=proc.stdin) as tar:    

        tar.add( dPath, filter=tCFilter)
                                                           
        tar.close() 

    proc.communicate()            
    proc.wait()                  
                
def createZBackupOfManifest(fName, data, aFlags):    
	    
    if(aFlags):
        cCmd = "zbackup backup "+fName+" "+' '.join(aFlags)
        proc = subprocess.Popen(cCmd, shell=True, stdin=subprocess.PIPE, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
    else:
        proc = subprocess.Popen(["zbackup", "backup", fName], stdin=subprocess.PIPE, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)	    	

    proc.stdin.write(data)
            
    proc.communicate()            
    proc.wait()           

def generatePatterns(fnPatterns):

    pList=[]

    for x in fnPatterns:
        pList.append(fnmatch.translate(x)[:-7])

    return pList

def matchPatterns(string, pList):

    for pattern in pList:
        if re.search(pattern, string)!=None:
            return True

    return False                                                

def tCFilter(tInfo):

	tInfo.name='/'+tInfo.name

	rPath=os.path.relpath(tInfo.name, dPath)

	if not matchPatterns(rPath, excludes):

		if(tInfo.islnk() or tInfo.issym() or tInfo.isdir() or tInfo.isfile() ):						
			return handleNewElement([rPath, tInfo.mtime], tInfo)			

	elif mDict.__contains__(rPath):
		mDict.pop(rPath)		

def handleNewElement(info, tInfo):

    if(mDict.__contains__(info[0])):
        mDict[info[0]][4]=1

    if (not mDict.__contains__(info[0])) or (info[1]-mDict[info[0]][0])>1 or mDict[info[0]][5]!=tInfo.uid or mDict[info[0]][6]!=tInfo.gid:
        
        if not mDict.__contains__(info[0]):
            val=2
        else:                 
            val=3        
          
        if(tInfo.isdir()):
            mDict[info[0]]=[info[1], int(time.time()), tInfo.size, os.path.relpath(os.path.realpath(nBackup), iPath), val, tInfo.uid, tInfo.gid, 0]                    
        else:    
            mDict[info[0]]=[info[1], int(time.time()), tInfo.size, os.path.relpath(os.path.realpath(nBackup), iPath), val, tInfo.uid, tInfo.gid, 1]                            	
        
        tInfo.name=info[0]
        return tInfo

    elif mAge: 
         
        if shouldBack(mAge*3600, mAJitter*3600, info[0], mDict[info[0]][1]):
            
            mDict[info[0]][1]=int(time.time())            
            mDict[info[0]][3]=os.path.relpath(os.path.realpath(nBackup), iPath)            
            mDict[info[0]][4]=4                               

            tInfo.name=info[0]
            return tInfo
    
    if(tInfo.isdir()):
        return tInfo
    else:    	
        return None

def handleBackupCreation(pArgs):  

    global iPath, mDict, dPath, excludes, nBackup, mAge, mAJitter
    
    if not hBCreationChecks(pArgs):
        return -1
       
    dPath=pArgs.dPath        
    
    iPath=getInfoPath(os.path.dirname(os.path.realpath(pArgs.nBackup)))  
    nBackup=pArgs.nBackup
    mAge=pArgs.mAge
    mAJitter=pArgs.mAJitter     
    
    if pArgs.pBackup:
                
        try:
            mDict=readCSVManifestFC(pArgs.pBackup+'.manifest', pArgs.aFlags)
                                    
        except subprocess.CalledProcessError as e:                    
            return e.returncode                    
            
    else:
        mDict={}

    excludes=[]

    if pArgs.excludes:
        excludes=generatePatterns(pArgs.excludes)
    
    try:
            
        createZBackup(pArgs.nBackup, pArgs.aFlags)                                    
        """createZBackupOfManifest(pArgs.nBackup+'.manifest', bytes(getXmlManifestFromDict(mDict, pArgs.dPath), 'UTF-8'), pArgs.aFlags)"""            
        createZBackupOfManifest(pArgs.nBackup+'.manifest', bytes(getCSVManifestFromDict(mDict, pArgs.dPath), 'UTF-8'), pArgs.aFlags)
                                                                
        return 0        
        
    except subprocess.CalledProcessError as e:                    
        return e.returncode                    
    
def handleBackupRestoration(pArgs):   

    if not hBRestorationChecks(pArgs):
        return -1
    
    iPath = getInfoPath(pArgs.backup)
    
    try:
        
        mDict, isFileMap=readCSVManifestFR(pArgs.backup+'.manifest', pArgs.includes, pArgs.aFlags)

        for k, v in mDict.items():
            extractFilesFromBackup(os.path.join(iPath, k), pArgs.aFlags, k, v, isFileMap)                    
    
    except subprocess.CalledProcessError as e:                    
        return e.returncode     

    return 0                         

def getInfoPath(pPath):
        
    if os.path.isfile(os.path.join(pPath, "info")):
        return pPath
    
    elif os.path.dirname(pPath)!=pPath:
        return getInfoPath(os.path.dirname(pPath))
    
    else:
        return ""            

def printInfo(index, fName):
    
    if index==2:
        print(fName+"\tSTORED")
        
    elif index==3:
        print(fName+"\tUPDATED")
        
    elif index==4:
        print(fName+"\tREFRESHED")
        
def getETFromStr(dStr):
    
    pattern = '%Y-%m-%dT%H:%M:%S'
    return int(time.mktime(time.strptime(dStr, pattern)))

def getRJitter(fName, mAJitter):
            
    return (int(hashlib.sha1(fName.encode('UTF-8')).hexdigest(), 16 ) % (2*mAJitter)) - mAJitter
    
def shouldBack(mAge, mAJitter, fName, lBTime):
        
    pTime=int(time.time())
                            
    mASeconds=mAge+getRJitter(fName, int(mAJitter))
    
    if (pTime-lBTime)>mASeconds:
        return True
    
    return False
    
def hBCreationChecks(pArgs):
        
    if not os.path.isfile(pArgs.pBackup):
        
        if (not pArgs.pBackup==''):                    
            print('The previous backup file does not exist')
            return False
    
    else:        
    
        if not os.path.isfile(pArgs.pBackup+'.manifest'):
            print('The manifest associated with previous backup file does not exist')
            return False        
    
    if not os.path.isdir(pArgs.dPath):
        print('The directory from which files need to be backed up does not exist')
        return False                                        
    
    fName, fExtension = os.path.splitext(pArgs.nBackup)
        
    if(fExtension!='.tar'):        
        print('The file extension of the new backup should be \'tar\'')
        return False 
    
    if (pArgs.mAge and (not pArgs.mAJitter)) or ((not pArgs.mAge) and pArgs.mAJitter):
        print('The --maxAgeJitter argument should be used in conjunction with --maxAge')
        return False
    
    return True      
    
def hBRestorationChecks(pArgs):
        
    if not os.path.isfile(pArgs.backup):    
        print('The previous backup file does not exist')
        return False    
    
    if not os.path.isfile(pArgs.backup+'.manifest'):
        print('The manifest associated with previous backup file does not exist')
        return False            
            
    return True

def getCreateArgsParser():
        
    parser = argparse.ArgumentParser(description='ZBackupTar backup creation')
    
    parser.add_argument('create', help='Option used to create a new zBackup' )         
        
    parser.add_argument('--previousBackup', dest='pBackup', metavar='FILEPATH', 
        help='Path of the previous backup', required=True)
    
    parser.add_argument('--newBackup', dest='nBackup', metavar='FILEPATH', 
        help='Path of the new backup', required=True)        
    
    parser.add_argument('--zbackupArgs', dest='aFlags', metavar='AF', nargs='*',
        help='Additional flags to create a new backup')    
    
    parser.add_argument('--exclude', dest='excludes', action='append', metavar='EFiles',  
        help='Files to be excluded from the backup')
    
    parser.add_argument('--maxAge', dest='mAge', metavar='MAXAGE', type=float,
        help='Refresh any file older than this in the manifest')   
    
    parser.add_argument('--maxAgeJitter', dest='mAJitter', metavar='AGEJITTER', type=float, 
        help='Jitter bound to be used in conjunction with maxAge')
    
    parser.add_argument('dPath', metavar='DIRPATH', type=str,
        help='Path of the directory with the files to be backed up' )     
    
    return parser

def getRestoreArgsParser():
    
    parser = argparse.ArgumentParser(description='ZBackupTar backup restoration')
    
    parser.add_argument('restore', default='restore',
        help='Option used to restore a zBackup' )        
            
    parser.add_argument('--backup', dest='backup', metavar='FILEPATH', 
        help='Path of the backup file to be restored', required=True)            
    
    parser.add_argument('--zbackupArgs', dest='aFlags', metavar='AF', type=str, nargs='*',
        help='Additional flags to create a new backup')
    
    parser.add_argument('includes', metavar='IFiles', nargs='+', 
    	help='Restore the file structure from DIRPATH onwards using the backups')                                      
    
    return parser

def main():  
    
    cParser=getCreateArgsParser()
    rParser=getRestoreArgsParser()
                    
    if len(sys.argv)>1:
    
        if sys.argv[1]=='create':
            
            retCode=handleBackupCreation(cParser.parse_args())
                        
            if retCode!=0:
                raise Exception(retCode)
            
        elif sys.argv[1]=='restore':
            
            sys.argv.append('*')
            pArgs=rParser.parse_known_args()[0]

            if len(pArgs.includes)>1:
                del pArgs.includes[-1]        		

            retCode=handleBackupRestoration(pArgs)

            if retCode!=0:
                raise Exception(retCode)            
            
        elif sys.argv[1]=='-h' or sys.argv[1]=='--help':
            
            cParser.print_help()
            rParser.print_help()            
            
        else:
            print('Invalid ZBackup-tar operation. Please use\n')            
            cParser.print_usage()
            rParser.print_usage()                        
            
    else:
        print('ZBackup-tar operation not specified. Please use\n')
        cParser.print_help()
        rParser.print_help()
            
    
if __name__ == "__main__":
    
    main()
